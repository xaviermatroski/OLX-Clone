<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages - IIT Ropar Marketplace</title>
    <link rel="stylesheet" href="/css/styles.css">
    <!-- Bootstrap CSS for responsive design -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="#">
            <img src="/images/iitropar_logo.jpg" alt="IIT Ropar Logo" height="50">
            IIT Ropar Marketplace
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/user/<%= userName %>">
                        <i class="fas fa-home"></i> Home</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-user"></i> Profile
                    </a>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="/profile/<%= userName %>">View Profile</a>
                        <a class="dropdown-item" href="/orders">My Orders</a>
                        <div class="dropdown-divider"></div>
                        <form id="logout-form" action="/logout" method="POST" style="display: none;"></form>
                        <a class="dropdown-item" href="#" onclick="document.getElementById('logout-form').submit();">Logout</a>
                    </div>
                </li>
            </ul>
        </div>
    </nav>

    <div class="container mt-4 mb-4">
        <div class="row">
            <!-- Chat list -->
            <div class="col-md-4 chat-list">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Conversations</h5>
                    </div>
                    <div class="list-group list-group-flush">
                        <% if (conversations && conversations.length > 0) { %>
                            <% conversations.forEach(function(conv) { %>
                                <% const otherUser = conv.participants.find(p => p.userName !== userName) %>
                                <div class="list-group-item list-group-item-action conversation-item" 
                                     data-conversation-id="<%= conv._id %>"
                                     onclick="loadConversation('<%= conv._id %>', '<%= otherUser ? otherUser.userName : `Unknown User` %>')">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-1"><%= otherUser ? otherUser.userName : 'Unknown User' %></h6>
                                            <% if (conv.messages && conv.messages.length > 0) { %>
                                                <small class="text-muted">
                                                    <%= conv.messages[conv.messages.length - 1].text.substring(0, 30) %>...
                                                </small>
                                            <% } %>
                                        </div>
                                        <small class="text-muted">
                                            <%= new Date(conv.updatedAt).toLocaleDateString() %>
                                        </small>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center p-4 text-muted">
                                <i class="fas fa-comments fa-2x mb-2"></i>
                                <p class="mb-0">No conversations yet</p>
                                <small>Start by messaging other users</small>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Chat messages -->
            <div class="col-md-8">
                <div class="card chat-box">
                    <div class="card-header">
                        <h5 class="mb-0">Select a conversation to start chatting</h5>
                    </div>
                    <div class="card-body chat-messages" id="chatMessages">
                        <!-- Messages will be loaded here dynamically -->
                    </div>
                    <div class="card-footer">
                        <form id="messageForm" class="message-form d-none">
                            <div class="input-group">
                                <input type="text" class="form-control" id="messageInput" 
                                       placeholder="Type your message..." autocomplete="off">
                                <div class="input-group-append">
                                    <button class="btn btn-primary" type="submit">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Report User Modal with enhanced version -->
    <div class="modal fade" id="reportModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title">
                        <i class="fas fa-flag"></i> Report User
                    </h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="reportForm">
                        <input type="hidden" id="reportedUser" name="reportedUser">
                        
                        <div class="form-group">
                            <label>Select Reason for Report:</label>
                            <div class="custom-control custom-radio mb-2">
                                <input type="radio" id="spam" name="reportReason" class="custom-control-input" value="spam">
                                <label class="custom-control-label" for="spam">Spam</label>
                            </div>
                            <div class="custom-control custom-radio mb-2">
                                <input type="radio" id="harassment" name="reportReason" class="custom-control-input" value="harassment">
                                <label class="custom-control-label" for="harassment">Harassment</label>
                            </div>
                            <div class="custom-control custom-radio mb-2">
                                <input type="radio" id="inappropriate" name="reportReason" class="custom-control-input" value="inappropriate_content">
                                <label class="custom-control-label" for="inappropriate">Inappropriate Content</label>
                            </div>
                            <div class="custom-control custom-radio mb-2">
                                <input type="radio" id="fake" name="reportReason" class="custom-control-input" value="fake_account">
                                <label class="custom-control-label" for="fake">Fake Account</label>
                            </div>
                            <div class="custom-control custom-radio mb-2">
                                <input type="radio" id="other" name="reportReason" class="custom-control-input" value="other">
                                <label class="custom-control-label" for="other">Other reason</label>
                            </div>
                        </div>
                        
                        <div class="form-group" id="otherReasonGroup" style="display: none;">
                            <label for="otherReason">Specify Other Reason:</label>
                            <textarea class="form-control" id="otherReason" rows="3" placeholder="Please provide details..."></textarea>
                        </div>

                        <div class="form-group">
                            <label for="reportDescription">Additional Details (Optional):</label>
                            <textarea class="form-control" id="reportDescription" name="reportDescription" 
                                      rows="3" placeholder="Provide any additional details or context about this report..."></textarea>
                            <small class="form-text text-muted">
                                Please include specific examples or details that will help us investigate this report.
                            </small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="submitReport()" id="submitReportBtn" disabled>
                        <i class="fas fa-exclamation-triangle"></i> Submit Report
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer bg-dark text-white py-3">
        <div class="container text-center">
            <p>&copy; 2025 IIT Ropar Marketplace. All rights reserved.</p>
        </div>
    </footer>

    <!-- Bootstrap JS and dependencies - Changed from slim to full jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const chatMessages = document.getElementById('chatMessages');
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const userName = '<%= userName %>';
        let currentConversationId = '<%= currentConversation ? currentConversation._id : "" %>';

        // Add these variables at the top with other declarations
        const urlParams = new URLSearchParams(window.location.search);
        const seller = urlParams.get('seller');
        const productName = urlParams.get('productName');

        // Auto-load conversation if seller parameter exists
        if (seller) {
            const conversation = Array.from(document.querySelectorAll('.conversation-item')).find(item => {
                const userName = item.querySelector('h6').textContent;
                return userName === seller;
            });

            if (conversation) {
                conversation.click();
            }
        }

        // Clear the session storage flag when leaving the page
        window.addEventListener('beforeunload', () => {
            sessionStorage.removeItem('initialMessageSent');
        });

        // Clear unread messages when opening conversation
        if (currentConversationId) {
            let unreadMessages = JSON.parse(localStorage.getItem('unreadMessages') || '[]');
            unreadMessages = unreadMessages.filter(id => id !== currentConversationId);
            localStorage.setItem('unreadMessages', JSON.stringify(unreadMessages));
            
            if (unreadMessages.length === 0) {
                localStorage.removeItem('unreadMessages');
                window.opener && window.opener.document.querySelector('.notification-dot')?.classList.add('d-none');
            }
        }

        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Initially scroll to bottom
        scrollToBottom();

        // Handle message form submission
        if (messageForm) {
            messageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const message = messageInput.value.trim();
                if (message && currentConversationId) {
                    socket.emit('chatMessage', {
                        conversationId: currentConversationId,
                        message,
                        sender: userName,
                        replyTo: replyContext ? {
                            id: replyContext.id,
                            type: replyContext.type
                        } : undefined
                    });
                    messageInput.value = '';
                    clearReplyContext();
                }
            });
        }

        // Listen for messages
        socket.on('message', (message) => {
            if (message.conversationId === currentConversationId) {
                appendMessage(message);
                scrollToBottom();
            }
        });

        function loadConversation(conversationId, otherUserName) {
            currentConversationId = conversationId;
            
            // Show loading state
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.innerHTML = '<div class="text-center p-4"><i class="fas fa-spinner fa-spin"></i> Loading messages...</div>';
            
            // Update the header
            const chatHeader = document.querySelector('.card-header h5');
            chatHeader.textContent = `Chat with ${otherUserName}`;
            
            // Show the message form
            messageForm.classList.remove('d-none');

            // Load messages
            fetch(`/messages/${conversationId}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Received data:', data); // Debug log
                    messagesContainer.innerHTML = '';
                    
                    if (data.error) {
                        throw new Error(data.error);
                    }

                    if (data.messages && data.messages.length > 0) {
                        data.messages.forEach(message => {
                            appendMessage({
                                messageId: message.messageId,
                                sender: message.sender,
                                text: message.text,
                                createdAt: new Date(message.createdAt),
                                replyTo: message.replyTo
                            });
                        });
                        scrollToBottom();
                    } else {
                        messagesContainer.innerHTML = '<div class="text-center p-4 text-muted">No messages yet</div>';
                    }
                    
                    // Highlight active conversation
                    document.querySelectorAll('.conversation-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    const activeConversation = document.querySelector(`[data-conversation-id="${conversationId}"]`);
                    if (activeConversation) {
                        activeConversation.classList.add('active');
                    }
                })
                .catch(error => {
                    console.error('Error loading messages:', error);
                    messagesContainer.innerHTML = '<div class="text-center p-4 text-danger">Error loading messages</div>';
                });
        }

        let replyContext = null;

        function appendMessage(message) {
            const messageDiv = document.createElement('div');
            const isOwnMessage = message.sender === userName;
            messageDiv.className = `message ${isOwnMessage ? 'message-sent' : 'message-received'}`;
            messageDiv.id = `message-${message.messageId}`;

            let messageContent = `
                <div class="message-content">
                    ${!isOwnMessage ? `<small class="sender-name">${message.sender}</small>` : ''}
            `;

            // Add reply preview if message is a reply
            if (message.replyTo && message.replyTo.id) {
                messageContent += `
                    <div class="replied-message" onclick="highlightMessage('message-${message.replyTo.id}')">
                        <div class="reply-preview">
                            <i class="fas fa-reply"></i>
                            <strong>${escapeHtml(message.replyTo.sender)}</strong>
                            <span class="reply-text">${escapeHtml(message.replyTo.text)}</span>
                        </div>
                    </div>
                `;
            }

            messageContent += `
                    <div class="message-text">${escapeHtml(message.text)}</div>
                    <small class="message-time">
                        ${new Date(message.createdAt).toLocaleTimeString()}
                    </small>
                    <button class="reply-button" onclick="setReplyContext('${message.messageId}', '${message.sender}', '${escapeHtml(message.text)}')">
                        <i class="fas fa-reply"></i>
                    </button>
                </div>
            `;

            messageDiv.innerHTML = messageContent;
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
        }

        function highlightMessage(messageId) {
            const element = document.getElementById(messageId);
            if (element) {
                // Remove any existing highlight classes
                document.querySelectorAll('.highlighted-message').forEach(el => {
                    el.classList.remove('highlighted-message');
                });
                
                // Add highlight class and scroll into view
                element.classList.add('highlighted-message');
                element.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        }

        function setReplyContext(messageId, sender, text) {
            replyContext = {
                id: messageId,
                type: 'message',
                sender: sender,
                text: text
            };
            showReplyPreview();
            messageInput.focus();
        }

        // Escape HTML for safe rendering
        function escapeHtml(text) {
            if (!text) return '';
            return text.replace(/[&<>"'`]/g, function (match) {
                return ({
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;',
                    '`': '&#96;'
                })[match];
            });
        }

        // Show reply preview above input
        function showReplyPreview() {
            if (!replyContext) return;

            let replyPreview = document.getElementById('replyPreview');
            if (!replyPreview) {
                replyPreview = document.createElement('div');
                replyPreview.id = 'replyPreview';
                replyPreview.className = 'reply-preview-bar';
                messageForm.parentNode.insertBefore(replyPreview, messageForm);
            }

            replyPreview.innerHTML = `
                <div class="d-flex justify-content-between align-items-center w-100">
                    <div>
                        <i class="fas fa-reply mr-2"></i>
                        <strong>${escapeHtml(replyContext.sender)}</strong>: 
                        <span class="text-muted">${escapeHtml(replyContext.text)}</span>
                    </div>
                    <button type="button" class="close" onclick="clearReplyContext()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `;
            replyPreview.style.display = 'flex';
        }

        function clearReplyContext() {
            replyContext = null;
            const replyPreview = document.getElementById('replyPreview');
            if (replyPreview) replyPreview.style.display = 'none';
        }

        // Highlight a message for 2-3 seconds
        function highlightMessage(messageId) {
            const el = document.getElementById(messageId);
            if (el) {
                el.classList.add('highlighted-message');
                el.scrollIntoView({ behavior: 'smooth', block: 'center' });
                setTimeout(() => {
                    el.classList.remove('highlighted-message');
                }, 2000);
            }
        }

        // Report handling functions
        function openReportModal(username) {
            document.getElementById('reportedUser').value = username;
            $('#reportModal').modal('show');
        }

        // Add these new functions for report handling
        document.addEventListener('DOMContentLoaded', function() {
            // Add event listeners after DOM is fully loaded
            document.querySelectorAll('input[name="reportReason"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    const submitBtn = document.getElementById('submitReportBtn');
                    const otherReasonGroup = document.getElementById('otherReasonGroup');
                    
                    submitBtn.disabled = false;
                    
                    if (this.value === 'other') {
                        otherReasonGroup.style.display = 'block';
                        submitBtn.disabled = !document.getElementById('otherReason').value.trim();
                    } else {
                        otherReasonGroup.style.display = 'none';
                    }
                });
            });

            // Check if otherReason element exists before adding event listener
            const otherReasonElement = document.getElementById('otherReason');
            if (otherReasonElement) {
                otherReasonElement.addEventListener('input', function() {
                    const submitBtn = document.getElementById('submitReportBtn');
                    submitBtn.disabled = !this.value.trim();
                });
            }
        });

        function submitReport() {
            const reportedUser = document.getElementById('reportedUser').value;
            const selectedReason = document.querySelector('input[name="reportReason"]:checked');
            const description = document.getElementById('reportDescription').value.trim();
            
            if (!selectedReason) {
                alert('Please select a reason for reporting');
                return;
            }

            let reason = selectedReason.value;
            if (reason === 'other') {
                const otherReason = document.getElementById('otherReason').value.trim();
                if (!otherReason) {
                    alert('Please specify the other reason');
                    return;
                }
                reason = otherReason;
            }

            const fullReason = description ? `${reason}\n\nAdditional Details: ${description}` : reason;

            // Show loading state
            const submitBtn = document.getElementById('submitReportBtn');
            const originalContent = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
            submitBtn.disabled = true;

            fetch('/report-user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    reportedUser,
                    reason: fullReason,
                    conversationId: '<%= currentConversation ? currentConversation._id : "" %>'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    // Show success message
                    alert('Report submitted successfully');
                    $('#reportModal').modal('hide');
                    document.getElementById('reportForm').reset();
                } else {
                    throw new Error(data.error || 'Error submitting report');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error submitting report. Please try again.');
            })
            .finally(() => {
                // Restore button state
                submitBtn.innerHTML = originalContent;
                submitBtn.disabled = false;
            });
        }

        // Add Quick Message Function
        function sendQuickMessage(text) {
            if (currentConversationId) {
                socket.emit('chatMessage', {
                    conversationId: currentConversationId,
                    message: text,
                    sender: userName
                });
            }
        }
    </script>

    <style>
        .chat-box {
            height: 80vh;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
            border: none;
            border-radius: 12px;
            overflow: hidden;
        }

        .chat-messages {
            height: calc(80vh - 130px);
            overflow-y: auto;
            padding: 20px;
            background: #f8f9fa;
        }

        .message {
            margin-bottom: 20px;
            opacity: 1;
            transition: all 0.3s ease;
            max-width: 85%;
        }

        .message-content {
            padding: 12px 16px;
            border-radius: 18px;
            position: relative;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .message-sent {
            margin-left: auto;
        }

        .message-sent .message-content {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }

        .message-received .message-content {
            background: white;
            color: #333;
            border-bottom-left-radius: 4px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .message-time {
            font-size: 0.7rem;
            margin-top: 5px;
            opacity: 0.7;
        }

        .reply-preview-bar {
            background: #f8f9fa;
            border-left: 4px solid #28a745;
            padding: 10px 15px;
            margin-bottom: 8px;
            border-radius: 8px;
            font-size: 0.9em;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .replied-message {
            background: rgba(40, 167, 69, 0.1);
            border-left: 3px solid #28a745;
            padding: 8px 12px;
            margin-bottom: 8px;
            border-radius: 8px;
            font-size: 0.9em;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .replied-message:hover {
            background: rgba(40, 167, 69, 0.15);
            transform: translateX(3px);
        }

        .reply-preview {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .reply-text {
            color: #666;
            font-size: 0.9em;
            margin-left: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        .reply-button {
            opacity: 0;
            transition: all 0.2s ease;
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 4px 10px;
            border-radius: 15px;
            background: rgba(0, 0, 0, 0.1);
            border: none;
            color: inherit;
            font-size: 0.8em;
            cursor: pointer;
        }

        .message-content:hover .reply-button {
            opacity: 1;
        }

        .highlighted-message {
            animation: highlightFade 2s ease;
            position: relative;
            z-index: 1;
        }

        .highlighted-message::before {
            content: '';
            position: absolute;
            left: -100vw;
            right: -100vw;
            top: 0;
            bottom: 0;
            background-color: rgba(40, 167, 69, 0.2);
            z-index: -1;
            border-left: 4px solid #28a745;
        }

        .conversation-item {
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
            padding: 15px;
        }

        .conversation-item:hover {
            background-color: #f8f9fa;
            transform: translateX(3px);
        }

        .conversation-item.active {
            background-color: #e9ecef;
            border-left: 3px solid #28a745;
        }

        .card {
            border: none;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
        }

        .card-header {
            background: #f8f9fa;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding: 15px 20px;
        }

        .card-header h5 {
            color: #333;  /* Darker text color for better visibility */
            font-weight: 500;
        }

        /* Add sender name styling */
        .sender-name {
            display: block;
            color: #333;  /* Darker text color */
            font-weight: 500;
            margin-bottom: 4px;
            font-size: 0.9em;
        }

        /* Custom Scrollbar */
        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Message Input Styling */
        .message-form .form-control {
            border-radius: 20px;
            padding: 10px 20px;
            border: 1px solid #dee2e6;
            transition: all 0.3s ease;
        }

        .message-form .form-control:focus {
            box-shadow: none;
            border-color: #28a745;
        }

        .message-form .btn {
            border-radius: 20px;
            padding: 8px 20px;
            margin-left: 10px;
        }

        @keyframes highlightFade {
            0%, 50% {
                background-color: rgba(40, 167, 69, 0.2);
            }
            100% {
                background-color: transparent;
            }
        }
    </style>
</body>
</html>
